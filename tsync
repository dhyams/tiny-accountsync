#!/usr/bin/env python3

import os
import sys
import zmq
import logging
import logging.handlers

# zeromq port to listen for notifications
NOTIFY_PORT = 6060

MIN_UID = 1000
MIN_GID = 1000


def setup_zmq():
    global socket
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect("tcp://10.0.0.2:%d" % NOTIFY_PORT)
    socket.subscribe("")
    return socket


# this is a helper function for setup_logging that causes all uncaught exceptions to
# be logged.
def log_exceptions(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        # sys.__excepthook__(exc_type, exc_value, exc_traceback)
        logging.info("Terminated by user keyboard interrupt.")
        return

    logging.critical("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))



def setup_logging(rotate_log_size=4.0, rotate_log_count=10):

    # automatically log uncaught exceptions.
    sys.excepthook = log_exceptions

    logfile = "/var/log/account-sync.log"

    my_logger = logging.getLogger()
    my_logger.setLevel(logging.INFO)
    formatter = logging.Formatter("%(asctime)s %(process)d %(levelname)s: %(message)s")
    handler = logging.handlers.RotatingFileHandler(
        logfile, maxBytes=rotate_log_size * 1024 * 1024, backupCount=rotate_log_count,
    )
    handler.setFormatter(formatter)
    my_logger.addHandler(handler)

    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    my_logger.addHandler(handler)



 

def ugname(line):
    return line.split(':')[0]

def uidorgid(line):
    return int(line.split(':')[2])

def is_regularuid(uid):
    return uid >= MIN_UID and uid != 65534

def is_regulargid(uid):
    return uid >= MIN_GID and uid != 65534

def pwhash(line):
    return line.split(':')[1]

class AccountInfo:
    def __init__(self, pwfile, shadowfile, groupfile, gshadowfile):
       with open(pwfile, 'r') as fp:
           self.pw = {ugname(x) : x for x in fp if is_regularuid(uidorgid(x))}

       with open(shadowfile, 'r') as fp:
           self.shadow = {ugname(x): x for x in fp if ugname(x) in self.pw}

       with open(groupfile, 'r') as fp:
           self.grp = {ugname(x) : x for x in fp if is_regulargid(uidorgid(x))}

       with open(gshadowfile, 'r') as fp:
           self.gshadow = {ugname(x): x for x in fp if ugname(x) in self.grp}

class FileSet:
    def __init__(self, dct):
       self.dct = dct

       with open(dct["passwd"], 'r') as fp:
           self.pw = [x for x in fp if x.strip()]

       with open(dct["shadow"], 'r') as fp:
           self.shadow = [x for x in fp if x.strip()]

       with open(dct["group"], 'r') as fp:
           self.grp = [x for x in fp if x.strip()]

       with open(dct["gshadow"], 'r') as fp:
           self.gshadow = [x for x in fp if x.strip()]

    def validate(self):
         logging.info(f"Checking files: {self.dct['passwd']}")
         logging.info(f"Checking files: {self.dct['shadow']}")
         logging.info(f"Checking files: {self.dct['group']}")
         logging.info(f"Checking files: {self.dct['gshadow']}")

         if not self.check_fileformats():
             return False

         if not self.check_filesizes():
             return False

         if not self.check_for_known_users():
             return False

         if not self.check_for_known_groups():
             return False

         if not self.check_for_sudo_users():
             return False

         return True

    def check_for_sudo_users():

         # make sure that these users are in the sudo group
         admins = "tsandlin dhyams brent".split()

         # find the sudo line
         for line in self.grp:
              parts = line.split(':')
              grpname = parts[0]
              if grpname == "sudo":
                  sudoers = parts[-1].split(',')
                  for admin in admins:
                      if admin not in sudoers:
                          logging.error(f"{admin} is not in the sudo group but should be") 
                          return False



         return True


    def check_for_known_users(self):

         knowns = "root daemon bin man nobody syslog ntp sys sshd dhyams brent tsandlin slurm".split()

         for filesource in [self.pw, self.shadow]:
            users = [ugname(x) for x in filesource] 
            for k in knowns:
                if k not in users:
                    logging.error("required username %s not in password or shadow files"%k)
                    return False

         return True

    def check_for_known_groups(self):

         knowns = "root sudo adm daemon bin man syslog ntp sys sshd dhyams brent tsandlin slurm vlock nogroup crontab".split()

         for filesource in [self.grp, self.gshadow]:
            users = [ugname(x) for x in filesource] 
            for k in knowns:
                if k not in users:
                    logging.error("required group %s not in group or gshadow files"%k)
                    return False

         return True

    def check_fileformats(self):

       if not self.check_fileformat(self.pw, 7, numerical_fields = [2,3]):
           return False

       if not self.check_fileformat(self.grp, 4, numerical_fields = [2]):
           return False

       if not self.check_fileformat(self.shadow, 9, numerical_fields = [2,3,4,5]):
           return False

       if not self.check_fileformat(self.gshadow, 4, numerical_fields = []):
           return False


    def check_fileformat(self, filesource, nfields, numerical_fields):

        for line in filesource:
            parts = line.split(':')
            if len(parts) != nfields:
                logging.error(f"file does not have {nfields} fields: {line} {parts}")
                return False
            for f in numerical_fields:
               try:
                   int(parts[f])
               except ValueError:
                   logging.error(f"Invalid UID or GID {line}")
                   return False

        return True






    def check_filesizes(self):
         if len(self.pw) != len(self.shadow):
             logging.error("Password file not the same length as shadow")
             return False

         if len(self.grp) != len(self.gshadow):
             logging.error("Group file not the same length as gshadow")
             return False

         if (len(self.pw) < 20):
             logging.error("passwd file too short.")
             return False

         if (len(self.shadow) < 20):
             logging.error("shadow file too short.")
             return False

         if (len(self.grp) < 20):
             logging.error("group file too short.")
             return False

         if (len(self.gshadow) < 20):
             logging.error("gshadow file too short.")
             return False

         return True




def system(cmd):
    logging.info("EXECUTING: "+cmd)
    return os.system(cmd)


def pull(location, suffix):
    acctfiles = "passwd group shadow gshadow".split()
    filemap = {}
    for fname in acctfiles: 
        filemap[fname] = f"/tmp/{fname}.{suffix}"
        cmd = f"rm -f {filemap[fname]}"
        system(cmd)
        cmd = f"scp {location}{fname} {filemap[fname]}"
        system(cmd)

    return filemap
     

def updatepwg(ref, oldfile, kind, isgood):

    newfile = oldfile + ".new"

    oldnames = []
    purgednames = []
    newnames = []

    with open(oldfile, "r") as fp:
        with open(newfile, "w") as fpw:
           # in-place replacement of existing users/groups
           for line in fp:
              uid = uidorgid(line) 
              name = ugname(line) 
              oldnames.append(name)
              if isgood(uid) and name not in ref:
                  logging.info(f"Warning: {kind} {name}/{uid} in {oldfile} but not present on login-node. PURGING. ")
                  purgednames.append(name)
              else:
                  fpw.write(ref.get("name", line))
           # append any new users/groups
           for name in ref:
              if name not in oldnames:
                 uid = uidorgid(ref[name])
                 logging.info(f"Adding new {kind} %s/%d to %s"%(name,uid,newfile))
                 newnames.append(name)
                 fpw.write(ref[name])

    return newfile,newnames,purgednames


def updateshadow(shadowref, oldfile, newusers, purgedusers):
    newfile = oldfile + ".new"

    oldnames = []

    with open(oldfile, "r") as fp:
        with open(newfile, "w") as fpw:
           for line in fp:
              name = ugname(line)
              oldnames.append(name)
              if name in purgedusers:
                  logging.info(f"Warning: {name} in {oldfile} but not present on login-node. PURGING. ")
              else:
                  fpw.write(shadowref.get("name", line))
           for name in newusers:
               if name not in shadowref:
                   logging.info(f"Error: {name} was a newly added user but has no shadow entry.")
               else:
                   logging.info(f"Adding new username {name} to shadow.")
                   fpw.write(shadowref[name])

    return newfile


def check_fileset(fileset):
    try:
        fs = FileSet(fileset)
        return fs.validate()

    except:
        import traceback
        traceback.print_exc()
        logging.error("Unknown error in check_fileset")
        return False


def process():

    logging.info("****** beginning account sync *******")

    # pull from the login node.  This is the reference data.
    ref = pull("login-node:/etc/", "login-node")

    # check to see if the appropriate files exist. 
     
    acct = AccountInfo(ref["passwd"], ref["shadow"], ref["group"], ref["gshadow"])

    # iterate through the machines that we want to eventually push to, and pull shadow, passwd,
    # and group from them [storage-node, management-node:/nfsroot]

    ###########################
    # storage node
    ###########################
    old_sn_files = pull("storage-node:/etc/", "sn")

    newpwfile, newusers, purgedusers = updatepwg(acct.pw, old_sn_files["passwd"],"username", is_regularuid) 
    newshadowfile = updateshadow(acct.shadow, old_sn_files["shadow"], newusers, purgedusers)

    newgrpfile, newgrps, purgedgrps = updatepwg(acct.grp, old_sn_files["group"], "group", is_regulargid)
    newgshadowfile = updateshadow(acct.gshadow, old_sn_files["gshadow"], newgrps, purgedgrps)

    new_storage_node_files = { "passwd": newpwfile, "group": newgrpfile, "shadow": newshadowfile, "gshadow": newgshadowfile }



    ###########################
    # nfsroot 
    ###########################
    old_nfsroot_files = pull("management-node:/nfsroot/etc/", "nfsroot")

    newpwfile, newusers, purgedusers = updatepwg(acct.pw, old_nfsroot_files["passwd"],"username", is_regularuid) 
    newshadowfile = updateshadow(acct.shadow, old_nfsroot_files["shadow"], newusers, purgedusers)

    newgrpfile, newgrps, purgedgrps = updatepwg(acct.grp, old_nfsroot_files["group"], "group", is_regulargid)
    newgshadowfile = updateshadow(acct.gshadow, old_nfsroot_files["gshadow"], newgrps, purgedgrps)

    new_nfsroot_files = { "passwd": newpwfile, "group": newgrpfile, "shadow": newshadowfile, "gshadow": newgshadowfile }
     
    # do sanity checks

    if check_fileset(new_storage_node_files) and check_fileset(new_nfsroot_files):
        # push
        pass

    # TODO
    # every push needs a backup command first!!
    # maybe execute a git add then commit?
    # push files from storage-node back to storage-node

    # push files from management-node/nfsroot back to nfsroot
    # push files from management-node/nfsroot to c[1-14]: use pdcp!

  

if __name__ == "__main__":
   
    setup_logging()

    if 0:
        socket = setup_zmq()
        while True:
            notify = socket.recv_string()
            logging.info("Received notification: " + notify)
            process()
    else:
         process()

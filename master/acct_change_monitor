#!/usr/bin/env python3

import os
import pyinotify
import zmq

NOTIFY_PORT = 6060

# Example: monitors transient files.
#
# Run this code, then run transient_file.sh in another shell.

socket = None

def setup_zmq():
    global socket
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.bind("tcp://*:%d" % NOTIFY_PORT)
    


class ProcessChangedFile(pyinotify.ProcessEvent):

    def process_IN_MODIFY(self, event):
        # We have explicitly registered for this kind of event.
        print ('\t', event.pathname, ' -> written')

        socket.send("notify:"+event.pathname)
    

    def process_default(self, event):
        # Implicitly IN_CREATE and IN_DELETE are watched too. You can
        # ignore them and provide an empty process_default or you can
        # process them, either with process_default or their dedicated
        # method (process_IN_CREATE, process_IN_DELETE) which would
        # override process_default.
        # print ('default: ', event.maskname)
        pass


def get_pwfile():
    return os.path.join("/etc", "passwd")

def get_groupfile():
    return os.path.join("/etc", "group")

def get_shadowfile():
    return os.path.join("/etc", "shadow")

def begin():
    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm)

    #wm.watch_transient_file(get_pwfile(), pyinotify.IN_MODIFY, ProcessChangedFile)
    #wm.watch_transient_file(get_groupfile(), pyinotify.IN_MODIFY, ProcessChangedFile)
    #wm.watch_transient_file(get_shadowfile(), pyinotify.IN_MODIFY, ProcessChangedFile)

    wm.add_watch([get_pwfile(), get_groupfile(), get_shadowfile()], 
           pyinotify.IN_MODIFY, 
           ProcessChangedFile)
 
    
    notifier.loop()

if __name__ == "__main__":
    begin()